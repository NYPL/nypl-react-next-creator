import * as React from "react";
export interface SearchBarProps {
    /** Populates aria-label on the form;
     * defines a hidden string that labels
     * the SearchBar
     */
    ariaLabel?: string;
    /** Populates aria-labelledby on the form;
     * defines a visible string that labels
     * the SearchBar
     */
    ariaLabelledBy?: string;
    /** Additional attributes passed to the form */
    attributes?: {
        [key: string]: any;
    };
    /** BlockName for use with BEM. See how to work with modifiers and BEM here: http://getbem.com/introduction/ */
    blockName?: string;
    /** ClassName that appears in addition to "search-bar" */
    className?: string;
    /** Adds 'method' property to the form */
    method?: string;
    /** Adds 'action' property to the form */
    action?: string;
    /** ID that other components can cross reference for accessibility purposes */
    id?: string;
    /** Modifiers array for use with BEM. See how to work with modifiers and BEM here: http://getbem.com/introduction/ */
    modifiers?: string[];
    /** Handler on form submit */
    onSubmit: (event: React.FormEvent) => void;
}
/** Renders a wrapper `form` element to be used with `Select` (optional),
 * `Input`, and `Button` components together. */
declare function SearchBar(props: React.PropsWithChildren<SearchBarProps>): JSX.Element;
declare namespace SearchBar {
    var displayName: string;
    var __docgenInfo: {
        description: string;
        displayName: string;
        props: {
            ariaLabel: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            ariaLabelledBy: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            attributes: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            blockName: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            className: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            method: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            action: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            id: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            modifiers: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            onSubmit: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
        };
    };
}
export default SearchBar;
