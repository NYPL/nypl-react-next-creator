import * as React from "react";
interface HelperErrorTextProps {
    /** Added prop when HelperText is errored */
    ariaLive?: "polite" | "off" | "assertive";
    /** Added prop when HelperText is errored */
    ariaAtomic?: boolean;
    /** Additional attributes passed to <HelperErrorText> */
    attributes?: {
        [key: string]: any;
    };
    /** Additional className to add to the helperErrorText */
    className?: string;
    /** BlockName for use with BEM. See how to work with blockNames and BEM here: http://getbem.com/introduction/ */
    blockName?: string;
    /** unique ID for helper */
    id?: string;
    /** Toggles between helper and error styling */
    isError: boolean;
    /** Modifiers array for use with BEM. See how to work with modifiers and BEM here: http://getbem.com/introduction/ */
    modifiers?: string[];
}
/**
 * Helper or Error text for forms
 */
declare function HelperErrorText(props: React.PropsWithChildren<HelperErrorTextProps>): JSX.Element;
declare namespace HelperErrorText {
    var displayName: string;
    var __docgenInfo: {
        description: string;
        displayName: string;
        props: {
            ariaLive: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            ariaAtomic: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            attributes: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            className: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            blockName: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            id: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            isError: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            modifiers: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
        };
    };
}
export default HelperErrorText;
