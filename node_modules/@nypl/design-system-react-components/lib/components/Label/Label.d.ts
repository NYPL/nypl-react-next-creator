import * as React from "react";
export interface LabelOptions {
    labelContent?: JSX.Element;
    id?: string;
    htmlFor?: string;
}
interface LabelProps {
    /** Additional attributes to pass to the <label> tag */
    attributes?: {
        [key: string]: any;
    };
    /** BlockName for use with BEM. See how to work with blockNames and BEM here: http://getbem.com/introduction/ */
    blockName?: string;
    /** className that appears in addition to "label" */
    className?: string;
    /** The id of the html element that this Label is describing */
    htmlFor?: string;
    /** ID that other components can cross reference for accessibility purposes */
    id?: string;
    /** Modifiers for use with BEM. See how to work with blockNames and BEM here: http://getbem.com/introduction/ */
    modifiers?: string[];
    /** Displays "Required" or "Optional" string alongside label */
    optReqFlag?: string;
}
/** A Label for form inputs.
 * It should never be used alone.
 */
declare function Label(props: React.PropsWithChildren<LabelProps>): React.DetailedReactHTMLElement<{
    id: string;
    htmlFor: string;
    className: string;
}, HTMLElement>;
declare namespace Label {
    var displayName: string;
    var __docgenInfo: {
        description: string;
        displayName: string;
        props: {
            attributes: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            blockName: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            className: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            htmlFor: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            id: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            modifiers: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
            optReqFlag: {
                defaultValue: any;
                description: string;
                name: string;
                required: boolean;
                type: {
                    name: string;
                };
            };
        };
    };
}
export default Label;
