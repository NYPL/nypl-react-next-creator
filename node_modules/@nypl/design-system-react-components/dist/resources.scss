// Resources to export as sass mixins
// $space-xxs: $space/4;   //  4px
// $space-xs: $space/2;    //  8px
// $space-s: $space*1;     // 16px
// $space-m: $space*1.5;   // 24px
// $space-l: $space*2;     // 32px
// $space-xl: $space*3;    // 48px
// $space-xxl: $space*4;   // 64px

@mixin space-inline-none {
  margin-right: 0;
}

@mixin space-inline-xxs {
  margin-right: var(--space-xxs);
}

@mixin space-inline-xs {
  margin-right: var(--space-xs);
}

@mixin space-inline-s {
  margin-right: var(--space-s);
}

@mixin space-inline-m {
  margin-right: var(--space-m);
}

@mixin space-inline-l {
  margin-right: var(--space-l);
}

@mixin space-inline-xl {
  margin-right: var(--space-xl);
}

@mixin space-inline-xxl {
  margin-right: var(--space-xxl);
}

// $space-xs: $space/2;    //  8px
// $space-s: $space*1;     // 16px
// $space-m: $space*1.5;   // 24px
// $space-l: $space*2;     // 32px
// $space-xl: $space*3;    // 48px

@mixin space-inset-none {
  padding: 0;
}

@mixin space-inset-xs {
  padding: var(--space-xs);
}

@mixin space-inset-s {
  padding: var(--space-s);
}

@mixin space-inset-m {
  padding: var(--space-m);
}

@mixin space-inset-l {
  padding: var(--space-l);
}

@mixin space-inset-xl {
  padding: var(--space-xl);
}

// --space-xxs: calc(--space/4);   //  4px
// --space-xs: calc(--space/2);    //  8px
// --space-s: calc(--space*1);     // 16px
// --space-m: calc(--space*1.5);   // 24px
// --space-l: calc(--space*2);     // 32px
// --space-xl: calc(--space*3);    // 48px
// --space-xxl: calc(--space*4);   // 64px
// --space-xxxl: -calc(-space*6);  // 96px

@mixin space-stack-none {
  margin-bottom: 0;
}

@mixin space-stack-xxs {
  margin-bottom: var(--space-xxs);
}

@mixin space-stack-xs {
  margin-bottom: var(--space-xs);
}

@mixin space-stack-s {
  margin-bottom: var(--space-s);
}

@mixin space-stack-m {
  margin-bottom: var(--space-m);
}

@mixin space-stack-l {
  margin-bottom: var(--space-l);
}

@mixin space-stack-xl {
  margin-bottom: var(--space-xl);
}

@mixin space-stack-xxl {
  margin-bottom: var(--space-xxl);
}

@mixin space-stack-xxxl {
  margin-bottom: var(--space-xxxl);
}

@mixin space-stack-page {
  @include space-stack-l;

  @include breakpoint($breakpoint-large) {
    @include space-stack-xl;
  }

  &--full {
    @include space-stack-xxl;

    @include breakpoint($breakpoint-large) {
      @include space-stack-xxxl;
    }
  }
}

@mixin remove-stack-page {
  margin-top: calc(-1 * #{$space-l});

  @include breakpoint($breakpoint-large) {
    margin-top: calc(-1 * #{$space-xl});
  }

  &--full {
    margin-top: calc(-1 * #{$space-xxl});

    @include breakpoint($breakpoint-large) {
      margin-top: calc(-1 * #{$space-xxxl});
    }
  }
}

/**
 * Breakpoint Configuration
 * @see https://github.com/Team-Sass/breakpoint/wiki
 *
 */

/////////////////////
// Global Breakpoints

// Avoid using in favor of atomic, content-specific, breakpoints.
// These should be used for generic code, like layouts and typography, only. The CSS variables and the Sass variables below need to stay in sync.
// Sass' breakpoint() mixin doesn't work without Sass variables.
// CSS variables expose the breakpoint variables to consumers.
:root {
  --breakpoint-small: 320px;
  --breakpoint-medium: 600px;
  --breakpoint-large: 960px;
  --breakpoint-xl: 1280px;
}

$breakpoint-small: 320px;
$breakpoint-medium: 600px;
$breakpoint-large: 960px;
$breakpoint-xl: 1280px;
// The max-width breakpoint is used when the design should be applied at whatever the
// largest breakpoint is regardless of actual pixel value. e.g. removing outer margin on body wrapper
$max-width: $breakpoint-xl;

/////////////////////
// General Mixins (put specific ones in component files where applicable)

/// Mixin - Clearfix.
/// Adds clearfix based on http://bourbon.io/docs/#clearfix
/// use example =   @include cleafix

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin fieldset-reset {
  border: none;
  margin: 0;
  padding: 0;
}

/// Mixin - Wrapper
/// Outer container mixin for large screens
@mixin wrapper(
  $container-max-width: $max-width,
  $outer-container-break: $breakpoint-small,
  $v-margin: 0,
  $v-padding: 0,
  $h-padding: var(--space)
) {
  margin: #{$v-margin} auto;
  max-width: #{$container-max-width};
  padding: #{$v-padding} #{$h-padding};
  width: 100%;
}

.container {
  @include space-inset-s;
}

/// Use the breakout mixin for elements that should be edge-to-edge
/// Even when a parent container uses the wrapper mixin
@mixin breakout($v-padding: var(--space)) {
  margin-left: calc(-50vw + 50%);
  margin-right: calc(-50vw + 50%);
}

// Use the screenreader-only mixin for elements that you want to be visually hidden, but still want screenreaders to read out
@mixin screenreader-only() {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute !important;
  width: 1px;
  word-wrap: normal;
}

